import SendbirdChat, { SessionHandler } from '@sendbird/chat';
import { type SendbirdGroupChat } from '@sendbird/chat/groupChannel';
import { type SendbirdOpenChat } from '@sendbird/chat/openChannel';
import { Locale } from 'date-fns';
import { enUS } from 'date-fns/locale';
import React from 'react';

import { StringSet } from '@uikit/ui/Label/stringSet';

import type { ToggleButtonProps } from './components/widget/WidgetToggleButton';
import { BotStyle } from './context/WidgetSettingContext';
import RefreshIcon from './icons/ic-refresh.svg';
import { FunctionCallAdapter, SendbirdChatAICallbacks, WidgetCarouselItem } from './types';
import { noop } from './utils';

// Most of browsers use a 32-bit signed integer as the maximum value for z-index
export const MAX_Z_INDEX = 2147483647;
// .sendbird-modal-root will be on top of the widget window
export const WIDGET_WINDOW_Z_INDEX = MAX_Z_INDEX - 1;

export const DEFAULT_CONSTANT = {
  userNickName: 'User',
  betaMark: false,
  customBetaMarkText: 'BETA',
  firstMessageData: [
    // {
    //   data: {
    //     suggested_replies: [
    //       'What can I learn from Pre-K 8th grade?',
    //       'Tell me about Math',
    //     ],
    //   },
    //   message: "Hi~ I'm Khan Academy Support ChatBot. Ask me anything!",
    // },
  ],
  createGroupChannelParams: {
    // name: 'Sendbird AI Chatbot',
    // coverUrl:
    //   'https://images.unsplash.com/photo-1526304640581-d334cdbbf45e?ix' +
    //   'lib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2070&q=80',
  },
  chatBottomContent: {
    text: '',
  },
  messageBottomContent: {
    text: 'AI-generated response powered by OpenAI',
    infoIconText: 'This response is generated by AI and may lack complete accuracy.',
  },
  replacementTextList: [['the Text extracts', 'ChatBot Knowledge Base']],
  /**
   * width, and height values here are only placeholder due to required, but they are meaningless
   * as ConstantStateProvider is overwriting them based on isMobile state.
   */
  customRefreshComponent: {
    icon: RefreshIcon as React.ComponentType<any>,
    onClick: noop,
    style: {},
    width: '16px',
    height: '16px',
  },
  enableSourceMessage: false,
  enableEmojiFeedback: true,
  enableMention: true,
  enableResetHistoryOnConnect: false,
  enableWidgetExpandButton: false,
  dateLocale: enUS,
  enableHideWidgetForDeactivatedUser: false,
  messageInputControls: {
    blockWhileBotResponding: 10000,
  },
  tools: {
    functionCall: {
      carouselAdapter({ response }) {
        if (isMealsResponse(response)) {
          return response.meals.map((it) => ({ title: it.strMeal, url: '', featured_image: it.strMealThumb }));
        }

        return [];
      },
    },
  },
} satisfies Partial<Constant>;

// TODO: Remove this function when the Demo is finished
function isMealsResponse(response: unknown): response is { meals: { strMeal: string; strMealThumb: string }[] } {
  return !!response && typeof response === 'object' && 'meals' in response && Array.isArray(response.meals);
}

type ConfigureSession = (sdk: SendbirdChat | SendbirdGroupChat | SendbirdOpenChat) => SessionHandler;
type MatchString = string;
type ReplaceString = string;

export interface WidgetStyles extends Omit<Partial<BotStyle>, 'autoOpen'> {
  /**
   * @deprecated Use `accentColor` instead.
   * */
  primaryColor?: string; // Color for messages sent by me, suggested replies, etc.
}

export interface WelcomeUserMessage {
  message: string;
  suggestedReplies?: string[];
}

export interface BotInfo {
  profileUrl?: string;
  nickname?: string;
}

export interface BotStudioEditProps {
  botInfo?: BotInfo;
  aiAttributes?: Record<string, unknown>;
  welcomeMessages?: WelcomeUserMessage[];
  styles?: WidgetStyles;
  suggestedRepliesDirection?: 'horizontal' | 'vertical';
}

export interface MessageInputControls {
  /**
   * If undefined, false, or 0 is given, message input will not be blocked.
   * If true or non-zero numeric value is given, message input will be blocked.
   * If true is given, there will not be a force unblock (unblocks IFF reply is received).
   * If numeric value is given, it will be used as timeout to force unblock the input.
   * Default value is 10000 (force unblock after 10 seconds).
   */
  blockWhileBotResponding?: boolean | number;
}

export interface OnWidgetOpenStateChangeParams {
  value: boolean;
}

export interface Constant extends ConstantFeatureFlags, ConstantAIFeatures {
  /**
   * @public
   * @description User nickname to be used in the widget.
   */
  userNickName: string;
  /**
   * @public
   * @description Customizable refresh component.
   */
  customRefreshComponent: CustomRefreshComponent;
  /**
   * @public
   * @description String set to be used in the widget.
   */
  stringSet: StringSet;
  /**
   * @public
   * @description Device type to be used in the widget.
   */
  deviceType?: 'desktop' | 'mobile';
  /**
   * @public
   * @description User ID to be used in the widget connect. Must be used with `sessionToken` and `configureSession`.
   */
  userId?: string;
  /**
   * @public
   * @description Session token to be used in the widget connect. Must be used with `userId` and `configureSession`.
   */
  sessionToken?: string;
  /**
   * @public
   * @description Session configuration function. Must be used with `userId` and `sessionToken`.
   */
  configureSession?: ConfigureSession;
  /**
   * @public
   * @description Whether to open the widget automatically. (only works in desktop)
   */
  autoOpen?: boolean;
  /**
   * @public
   * @description Locale value to be applied to string values of message timestamp and date separator.
   */
  dateLocale: Locale;
  /**
   * @public
   * @description Message input state controlling properties.
   */
  messageInputControls?: MessageInputControls;
  /**
   * @private
   * @description Whether to show the beta mark.
   */
  betaMark: boolean;
  /**
   * @private
   * @description Custom text to be shown as the beta mark.
   */
  customBetaMarkText: string;
  /**
   * @private
   * @description Group channel creation parameters.
   */
  createGroupChannelParams: CreateGroupChannelParams;
  /**
   * @private
   * @description Chat bottom content.
   */
  chatBottomContent: ChatBottomContent;
  /**
   * @private
   * @description Message bottom content which will be displayed at the bottom of the message bubble.
   */
  messageBottomContent: MessageBottomContent;
  /**
   * @private
   * @description Replacement text list to be replaced in the message.
   */
  replacementTextList: [MatchString, ReplaceString][];
  /**
   * @private
   * @description First message data to be sent when the widget is opened.
   */
  firstMessageData: { data: { suggested_replies?: string[] }; message: string }[];
  /**
   * @private
   * @description Custom API host.
   */
  apiHost: string;
  /**
   * @private
   * @description Custom WS host.
   */
  wsHost: string;
  /**
   * @private
   * @description Custom user agent parameters.
   */
  customUserAgentParam?: Record<any, any>;
  /**
   * @private
   * @description Custom widget toggle button renderer.
   */
  renderWidgetToggleButton?: (props: ToggleButtonProps) => React.ReactElement;
  /**
   * @private
   * @description Service name to be used in the widget.
   */
  serviceName: string;
  /**
   * @private
   * @description Callbacks to be used in the widget.
   */
  callbacks?: SendbirdChatAICallbacks;
  /**
   * @private
   * @description Bot studio edit properties to be used in Sendbird Dashboard.
   */
  botStudioEditProps?: BotStudioEditProps;
  /**
   * @private
   * @description Widget open state.
   */
  widgetOpenState?: boolean;
  /**
   * @private
   * @description Callback to be called when the widget open state changes.
   */
  onWidgetOpenStateChange?: (params: OnWidgetOpenStateChangeParams) => void;
}

interface ConstantAIFeatures {
  /**
   * @public
   * @description tools to be used in the widget.
   * */
  tools: {
    functionCall: {
      carouselAdapter?: FunctionCallAdapter<WidgetCarouselItem[]>;
    };
  };
}

interface ConstantFeatureFlags {
  /**
   * @public
   * @description Whether to display the source of the knowledge data.
   */
  enableSourceMessage: boolean;
  /**
   * @public
   * @description Whether to enable feedback icons at the bottom of the message bubble.
   */
  enableEmojiFeedback: boolean;
  /**
   * @public
   * @description Whether to enable mention feature via `@{userName}` signature.
   */
  enableMention: boolean;
  /**
   * @public
   * @description Reset chat history when chat is connected.
   * */
  enableResetHistoryOnConnect: boolean;
  /**
   * @public
   * @description Hide widget for deactivated user.
   * */
  enableHideWidgetForDeactivatedUser: boolean;
  /**
   * @public
   * @description Enable widget expand button.
   * */
  enableWidgetExpandButton: boolean;
}

export interface CreateGroupChannelParams {
  name?: string;
  coverUrl?: string;
}

export interface ChatBottomContent {
  text: string;
  backgroundColor?: string;
}
export interface MessageBottomContent {
  text: string;
  infoIconText: string;
}

type CustomRefreshProps = {
  width?: string | number;
  height?: string | number;
  onClick?: () => void;
  style?: React.CSSProperties;
  id?: string;
};

export interface CustomRefreshComponent extends CustomRefreshProps {
  icon: React.ComponentType<CustomRefreshProps>;
}

export const elementIds = {
  widgetWindow: 'aichatbot-widget-window',
  widgetToggleButton: 'aichatbot-widget-button',
  collapseIcon: 'aichatbot-widget-collapse-icon',
  expandIcon: 'aichatbot-widget-expand-icon',
  closeIcon: 'aichatbot-widget-close-icon',
  refreshIcon: 'aichatbot-widget-refresh-icon',
  uikitModal: 'sendbird-modal-root',
};

export const widgetServiceName = {
  default: 'genai-chatbot-widget',
  self: {
    default: 'genai-self-service',
    wordpress: 'genai-wordpress-self-service',
    shopify: 'genai-shopify-self-service',
  },
  plugin: {
    wordpress: 'genai-wordpress-plugin',
    shopify: 'genai-shopify-plugin',
  },
} as const;

export const widgetStringSet = {
  messageInputDisabledPlaceholder: 'Waiting for the bot’s reply…',
  formVersionInvalidFallbackMessage: 'Form type messages are not available in this version.',
};
