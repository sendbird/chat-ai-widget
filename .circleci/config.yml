version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-cli: circleci/aws-cli@2.1.0
  aws-s3: circleci/aws-s3@4.0.0
  
executors:
  amd64:
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true
    resource_class: medium
  arm64:
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true
    resource_class: arm.medium
  ci-aws:
    docker:
      - image: cimg/aws:2024.03
    resource_class: small
  node:
    docker:
      - image: cimg/node:18.17.1
    resource_class: medium

commands:
  aws-create-invalidation:
    description: Create invalidation in CloudFront distribution
    parameters:
      distribution-id:
        default: default
        description: Distribution id for CloudFront
        type: string
      paths:
        default: /
        description: Target paths for invalidation
        type: string
      profile:
        default: default
        description: AWS profile name
        type: string
    steps:
      - run:
          command: |
            echo "Create invalidation in CloudFront"
            aws cloudfront create-invalidation \
                --distribution-id <<parameters.distribution-id>> \
                --paths <<parameters.paths>> --profile <<parameters.profile>>

jobs:
  build_container_image_and_push:
    executor: << parameters.architecture >>
    environment:
      AWS_ECR_REGISTRY_ID: '314716043882'
    parameters:
      app:
        description: application to build
        type: enum
        enum: ['webdemo', 'selfservice']
      architecture:
        description: architecture to build
        type: enum
        enum: ['amd64', 'arm64']
      build_path:
        description: the path to execute docker build
        type: string
      dockerfile:
        description: dockerfile name to use in docker build
        type: string
        default: Dockerfile
      repo:
        description: ECR repository name to push container image
        type: string
      aws_region:
        description: AWS region of ECR repository to push container image
        type: enum
        enum: ['us-east-1', 'us-west-2']
      extra_build_args:
        description: extra build args to pass to docker build
        type: string
    steps:
      - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: .
      - aws-ecr/build-and-push-image:
          dockerfile: << parameters.dockerfile >>
          new-profile-name: ci-ops
          path: << parameters.build_path >>
          build-path: << parameters.build_path >>
          platform: linux/<< parameters.architecture >>
          profile-name: default
          region: << parameters.aws_region >>
          repo: << parameters.repo >>
          role-arn: arn:aws:iam::314716043882:role/ci-ops
          tag: '$CIRCLE_TAG-<< parameters.app >>-<< parameters.architecture >>'
          extra-build-args: << parameters.extra_build_args >>
  push_arch_integrated_manifest:
    executor: arm64
    parameters:
      aws_region:
        description: AWS region of ECR repository to push container image
        type: enum
        enum: ['us-east-1', 'us-west-2']
      repo:
        description: ECR repository name to push container image
        type: string
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
      ECR_REPO: 314716043882.dkr.ecr.<<parameters.aws_region>>.amazonaws.com/<<parameters.repo>>
    steps:
      - aws-cli/setup:
          profile-name: default
          configure-default-region: false
      - aws-cli/role-arn-setup:
          profile-name: ci-ops
          source-profile: default
          role-arn: arn:aws:iam::314716043882:role/ci-ops
      - run:
          name: Login in docker registry
          command: |
            aws ecr get-login-password --region <<parameters.aws_region>> --profile ci-ops | docker login --username AWS --password-stdin $ECR_REPO
      - run:
          name: Push image manifest
          command: |
            docker manifest create "$ECR_REPO:$CIRCLE_TAG-webdemo" "$ECR_REPO:$CIRCLE_TAG-webdemo-amd64" "$ECR_REPO:$CIRCLE_TAG-webdemo-arm64"
            docker manifest create "$ECR_REPO:$CIRCLE_TAG-selfservice" "$ECR_REPO:$CIRCLE_TAG-selfservice-amd64" "$ECR_REPO:$CIRCLE_TAG-selfservice-arm64"
            docker manifest push "$ECR_REPO:$CIRCLE_TAG-webdemo"
            docker manifest push "$ECR_REPO:$CIRCLE_TAG-selfservice"
  scan_credentials:
    docker:
      - image: $SEC_THOG_SCANNER_IMAGE
        aws_auth:
          aws_access_key_id: $SEC_AWS_ID_FOR_THOG_ECR
          aws_secret_access_key: $SEC_AWS_KEY_FOR_THOG_ECR
    resource_class: small
    steps:
      - run:
          name: Scan credentials
          command: sh scan.sh
  build:
    executor: node
    steps:
      - checkout
      - run:
          name: install dependencies and build
          command: |
            cd ./packages/self-service
            npm install
            npm run build
      - persist_to_workspace:
          root: ./packages/self-service
          paths:
            - dist
  upload_to_s3_and_invalidate_cache:
    executor: ci-aws
    steps:
      - attach_workspace:
          at: .
      - aws-cli/setup:
          profile-name: default
          configure-default-region: false
      - aws-cli/role-arn-setup:
          profile-name: ci-web-prod
          source-profile: default
          role-arn: arn:aws:iam::049322569699:role/dashboard-ci-web-prod
      - aws-s3/sync:
          arguments: | 
            --delete
          from: dist/
          to: s3://genai-aichatbotwidget-use1-prod
          profile_name: ci-web-prod
      - aws-create-invalidation:
          distribution-id: 'EURYULTBDXGNR'
          paths: '/*'
          profile: ci-web-prod

workflows:
  build_and_push:
    jobs:
      - build_container_image_and_push:
          name: build_app-<<matrix.app>>-<<matrix.architecture>>
          filters: &only_version_tag_trigger
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          matrix: &amd64_and_arm64_matrix
            parameters:
              architecture:
                - amd64
                - arm64
              app:
                - webdemo
                - selfservice
          build_path: '.'
          aws_region: us-west-2
          repo: aiwidget/app
          dockerfile: Dockerfile.<<matrix.app>>
          extra_build_args: |
            --build-arg VITE_CHAT_WIDGET_APP_ID=AE8F7EEA-4555-4F86-AD8B-5E0BD86BFE67 \
            --build-arg VITE_CHAT_WIDGET_BOT_ID=khan-academy-bot \
            --build-arg VITE_WEB_DEMO_APP_ID=6E1B01A5-517F-4F68-A74A-8427F3DE904C \
            --build-arg VITE_WIDGET_DEMO_APP_ID=58F00FA8-C48E-461D-975E-18D33C8778AB
          context:
            - circleci-dashboard-bot
      - push_arch_integrated_manifest:
          name: integrate_manifest_app
          filters: *only_version_tag_trigger
          requires:
            - build_app-webdemo-amd64
            - build_app-webdemo-arm64
            - build_app-selfservice-amd64
            - build_app-selfservice-arm64
          aws_region: us-west-2
          repo: aiwidget/app
          context:
            - circleci-dashboard-bot
      - scan_credentials:
          filters: *only_version_tag_trigger
          context:
            - devsecops
          requires:
            - integrate_manifest_app
  deploy_to_s3:
    jobs:
      - build:
          name: build
          filters: *only_version_tag_trigger
      - upload_to_s3_and_invalidate_cache:
          name: upload_to_s3_and_invalidate_cache
          filters: *only_version_tag_trigger
          requires:
            - build
          context:
            - circleci-dashboard-bot
