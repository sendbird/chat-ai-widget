version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.1.0
  aws-s3: circleci/aws-s3@4.0.0

parameters:
  run_deploy_prod:
      type: boolean
      default: false

executors:
  ci-aws:
    docker:
      - image: cimg/aws:2024.03
    resource_class: small
  node:
    docker:
      - image: cimg/node:20.13.1
    resource_class: medium
  ci-node:
    docker:
      - image: cimg/node:20.13.1
    resource_class: medium
    working_directory: ~/project

commands:
  attach_project:
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Enable Corepack
          command: corepack enable --install-directory ~/bin
  aws-create-invalidation:
    description: Create invalidation in CloudFront distribution
    parameters:
      distribution-id:
        default: default
        description: Distribution id for CloudFront
        type: string
      paths:
        default: /
        description: Target paths for invalidation
        type: string
      profile:
        default: default
        description: AWS profile name
        type: string
    steps:
      - run:
          command: |
            echo "Create invalidation in CloudFront"
            aws cloudfront create-invalidation \
                --distribution-id <<parameters.distribution-id>> \
                --paths <<parameters.paths>> --profile <<parameters.profile>>

jobs:
  # CI - install dependencies
  prepare:
    executor: ci-node
    steps:
      - checkout
      - attach_project
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "yarn.lock" }}
            - v2-dependencies-
      - run:
          name: Install dependencies
          command: |
            git submodule update --init --recursive
            yarn install --immutable
      - save_cache:
          key: v2-dependencies-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
            - packages/self-service/node_modules
            # - packages/uikit/node_modules --> submodules are not cached
      - persist_to_workspace:
          root: .
          paths: .
  # CI - check format
  run-format:
    executor: ci-node
    steps:
      - attach_project
      - run:
          name: Run lint and prettier check
          command: yarn format:check
  # CI - check build
  run-build:
    executor: ci-node
    steps:
      - attach_project
      - run:
          name: Run build
          # command: yarn build
          command: sh scripts/build-check-ci.sh
  # CI - check test
  run-test:
    executor: ci-node
    steps:
      - attach_project
      - run:
          no_output_timeout: 15m
          name: Run test
          command: yarn test

  # Publish - build self-service
  build:
    executor: node
    parameters:
      widget_version:
        type: string
    steps:
      - checkout
      - run:
          name: Enable Corepack
          command: corepack enable --install-directory ~/bin
      - run:
          name: install dependencies and build
          command: |
            cd ./packages/self-service
            npm install
            npm run build version=<< parameters.widget_version >>
#            TODO: update self-service to use yarn workspaces
#            yarn install --immutable --immutable-cache
#            yarn build
      - persist_to_workspace:
          root: ./packages/self-service
          paths:
            - dist
  # Publish - upload self-service to S3 and invalidate cache
  upload_to_s3_and_invalidate_cache:
    executor: ci-aws
    parameters:
      s3_bucket:
        type: string
      distribution_id:
        type: string
      role_arn:
        type: string
    steps:
      - attach_workspace:
          at: .
      - aws-cli/setup:
          profile-name: default
          configure-default-region: false
      - aws-cli/role-arn-setup:
          profile-name: ci-web
          source-profile: default
          role-arn: << parameters.role_arn >>
      - aws-s3/sync:
          from: dist/
          to: << parameters.s3_bucket >>
          profile_name: ci-web
      - aws-s3/copy:
          arguments: '--metadata-directive REPLACE --cache-control "max-age=0" --content-type application/javascript'
          from: << parameters.s3_bucket >>/index.js
          to: << parameters.s3_bucket >>/index.js
          profile_name: ci-web
      - aws-s3/copy:
          arguments: '--metadata-directive REPLACE --cache-control "max-age=86400" --content-type application/javascript --recursive'
          from: << parameters.s3_bucket >>/${CIRCLE_TAG}
          to: << parameters.s3_bucket >>/${CIRCLE_TAG}
          profile_name: ci-web
      - aws-create-invalidation:
          distribution-id: << parameters.distribution_id >>
          paths: '"/index.js" "/playground/index.html"'
          profile: ci-web

workflows:
  ci:
    jobs:
      - prepare
      - run-format:
          requires:
            - prepare
      - run-build:
          requires:
            - prepare
      - run-test:
          requires:
            - prepare

  deploy_prod:
    when: << pipeline.parameters.run_deploy_prod >>
    jobs:
      - build:
          name: build
          widget_version: ""
          filters: &release_branch_trigger
            branches:
              only:
                - develop
      - upload_to_s3_and_invalidate_cache:
          name: upload_to_s3_and_invalidate_cache
          filters: *release_branch_trigger
          s3_bucket: $S3_BUCKET
          distribution_id: $DISTRIBUTION_ID
          role_arn: $ROLE_ARN
          requires:
            - build
          context:
            - circleci-dashboard-bot

  deploy_stg:
    jobs:
      - build:
          name: build_staging
          widget_version: $CIRCLE_TAG
          filters: &only_version_tag_trigger_staging
            tags:
              only: /^v\d+\.\d+\.\d+-staging(\.\d+)?$/
            branches:
              ignore: /.*/
      - upload_to_s3_and_invalidate_cache:
          name: upload_to_s3_and_invalidate_cache_staging
          filters: *only_version_tag_trigger_staging
          s3_bucket: $S3_BUCKET_STAGING
          distribution_id: $DISTRIBUTION_ID_STAGING
          role_arn: $ROLE_ARN_STAGING
          requires:
            - build_staging
          context:
            - circleci-dashboard-bot
